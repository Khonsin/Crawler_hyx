cd Crawl_hyx
scrapy genspider xxx xxx.com
scrapy crawl wanyi
scrapy crawl wanyi --nolog



middlewares.py
class CrawlHyxSpiderMiddleware:
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the spider middleware does not modify the
    # passed objects.

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_spider_input(self, response, spider):
        # Called for each response that goes through the spider
        # middleware and into the spider.

        # Should return None or raise an exception.
        return None

    def process_spider_output(self, response, result, spider):
        # Called with the results returned from the Spider, after
        # it has processed the response.

        # Must return an iterable of Request, or item objects.
        for i in result:
            yield i

    def process_spider_exception(self, response, exception, spider):
        # Called when a spider or process_spider_input() method
        # (from other spider middleware) raises an exception.

        # Should return either None or an iterable of Request or item objects.
        pass

    def process_start_requests(self, start_requests, spider):
        # Called with the start requests of the spider, and works
        # similarly to the process_spider_output() method, except
        # that it doesn’t have a response associated.

        # Must return only requests (not items).
        for r in start_requests:
            yield r

    def spider_opened(self, spider):
        spider.logger.info('Spider opened: %s' % spider.name)

class CrawlHyxDownloaderMiddleware:
@classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s
 def spider_opened(self, spider):
        spider.logger.info('Spider opened: %s' % spider.name)








import requests
import scrapy
from selenium import webdriver


class BaiduSpider(scrapy.Spider):
    name = 'baidu'
    # start_urls = ["https://www.baidu.com/s?rtt=1&bsst=1&cl=2&tn=news&ie=utf-8&word=美国军事"]

    def __init__(self, *args, **kwargs):
        # self.bro = webdriver.Chrome(executable_path='D:\Python\Crawler_hyx\chromedriver.exe')
        super().__init__(*args, **kwargs)
        self.errback_httpbin = None
        self.keyword = '美国军事'
        self.start_urls = ["https://www.baidu.com/s?rtt=1&bsst=1&cl=2&tn=news&ie=utf-8&word=美国军事"]
        self.url_list = []
        self.number = -1

        options = webdriver.ChromeOptions()
        prefs = {
            'profile.default_content_setting_values':
                {'notifications': 2,
                 'images': 2}  # 禁止谷歌浏览器弹出通知消息
        }
        options.add_experimental_option('prefs', prefs)
        # 设置chrome浏览器无界面模式
        # options.add_argument('--headless')
        self.bro = webdriver.Chrome(options=options, executable_path='D:\Python\Crawler_hyx\chromedriver.exe')
        # browser.maximize_window()  # 浏览器窗口最大化
        self.bro.implicitly_wait(1)  # 隐形等待10秒

    def start_requests(self):
        for u in self.start_urls:
            yield scrapy.Request(u, callback=self.parse, errback=self.errback_httpbin, dont_filter=True)

    def parse(self, response):
        self.number += 1
        self.bro.get(response.url)
        hreflist = []
        # print(response.url)


        # 一页全爬
        div_list = response.xpath('//*[@id="content_left"]/div[2]/div')
        # print(response.text)
        for div in div_list:
            url = div.xpath('./div/h3/a//@href').extract_first()
            print(url)
            # hreflist.append(web_node_list[i])

        # for href in hreflist:
        #     print(href)



    def closed(self, spider):
        self.bro.quit()